
*******************************************************************************************
******************** WELCOME TO NODE JS CHEAT SHEET****************************************
*******************************************************************************************

Node js is a javascript running on the server.


-----------------------------------------------------------------------------------------------------

//What is javascript engine
Javascript engine converts a code to machine understandable binary form

//What is REPL
The REPL is feature of Node is very useful in experimenting with Node.js codes and to debug javascript codes.

- Read , Eval , Print , Loop


----------------------------------------------------------------------------------------------------


//Diffreance beetween argument and parameter

Parameters are declared during function creating
Arguments are given during calling that function

//Javascript core modules

javascript modules are js libraries, with help of that modukes we can include set of functions

 Built in modules

----------------------------------------------------------------------------------------------------

//what is fs 
fs is a module for file structure

There are many inbuilt functions in functions

// creating a new file with fs module

Exercise: 
- learn creating_new_file_ex3.js

// Adding a new data in file

Exercise:
- add_data_in_file_by_sync_func_ex4.js

Exercise: 
- learn creating_new_file_ex3.js

//Buffer

- Node js includes an additional data type called buffer.
- It is not in js
- It is used to store binary data
- While reading a file or receiving packets over the network.

//CRUD operations in Node js syncronous way

//create a folder
fs.mkdirSync("folder_name")

//create a file
fs.writeFileSync("file_name", "data")

//read a file
fs.readFile("name", "UTF-8");

//Update file
fs.appendFileSync("file_name", "new data");

//Reaname file
fs.renameSync("file_name", "file_new_name");

//Delete file
fs.unlinkSync("file_name");


//Using asyncronous

//Create a file

fs.writeFile("async.txt", "This is async file", (err) => {
    console.log("created");
    console.log(err);
});


//Add a data in file

fs.appendFile("name", "text",(err) => {
    console.log("completed");
}

//Read a file

fs.readFile("name", "UTF-8" ,(err, data) => {
    console.log(data);
     console.log(err);
})

--------------------------------------------------------------------------------------------------------

//OS module

//The syntax for including the OS module in your application:
var os = require('os');

//functions

            Method	          Description
            arch()	          Returns the operating system CPU architecture
            constants	      Returns an object containing the operating system's constants for process signals, error cotes etc.
            cpus()	          Returns an array containing information about the computer's CPUs
            endianness()	  Returns the endianness of the CPU
            EOL	              Returns the end-of-line marker for the current operating system
            freemem()	      Returns the number of free memory of the system
            hostname()        Returns the hostname of the operating system
            loadavg()	      Returns an array containing the load averages, (1, 5, and 15 minutes)
            networkInterfaces()	Returns the network interfaces that has a network address
            platform()	      Returns information about the operating system's platform
            release()	      Returns information about the operating system's release
            tmpdir()	      Returns the operating system's default directory for temporary files
            totalmem()        Returns the number of total memory of the system
            type()	          Returns the name of the operating system
            uptime()	      Returns the uptime of the operating system, in seconds
            userInfo()	      Returns information about the current user


--------------------------------------------------------------------------------------------------------

//Node.js Path Module

//The syntax for including the Path module in your application
const path = require("path");

//Path Properties and Methods

        Method	        Description

        basename()	    Returns the last part of a path
        delimiter	    Returns the delimiter specified for the platform
        dirname()	    Returns the directories of a path
        extname()	    Returns the file extension of a path
        format()	    Formats a path object into a path string
        isAbsolute()	Returns true if a path is an absolute path, otherwise false
        join()	        Joins the specified paths into one
        normalize()	    Normalizes the specified path
        parse()	        Formats a path string into a path object
        posix	        Returns an object containing POSIX specific properties and methods
        relative()	    Returns the relative path from one specified path to another specified path
        resolve()	    Resolves the specified paths into an absolute path
        sep	            Returns the segment separator specified for the platform
        win32	        Returns an object containing Windows specific properties and methods


------------------------------------------------------------------------------------------------------


//Import export own created modules in appendFile

- For this you have to see import_export folder from the exercise

--------- NPM (Node Package Manager)--------



//npm (originally short for Node Package Manager) is a package manager for the JavaScript programming language maintained by npm, Inc.

//npm is the default package manager for the JavaScript runtime environment Node.js.

www.npmjs.com


//What is node modules
node modules saves our applications's dependecies

//For installing a module in projects (in terminal)
npm install (module_name) 

- For exercises see npm folder   

//What is Diffreance between local module & global module

- Local module installs in only specific folder and work on only that folder but the global modules installs in device globally

- for installing globally it use -g in installing it

//What is Nodemon
nodemon is a module for running our application live it works on saving the file

Nodemon is a popular tool that is used for the development of applications based on node.js. It simply restarts the node application whenever it observes the changes in the file present in the working directory of your project. Additionally, nodemon does not need any specific modifications to code or the mode of development.

//Module Wrapper function in node JS(IFEE)

(function(){
    ...
})


-------------------------------------------------------------------------------------------------------------------

//What is Node js web server?
- To access web pages of any web application, you need a web server.
- The web server will handle all the http requests for the web applications.
- IIS is a web server for ASP.NET , Apache is a web server for PHP or java web app.
- Node.js provides capabilities to create your own web server which will hadle HTTP requests asyncronously. 

//How to create Node js server

- require http module on you app
  EX : const http = require("http");

- Make a server const
  EX : 
      const server = http.createServer((req, res)  => {
         res.end('Hello from server');
        });  

- Listen the server 
  EX : 
       server.listen(8000, "127.0.0.1", () => {
           console.log("listning")
       });

---------------------------------------------------------------------------------------------------------------------------------------

//Routing

For changing in diffreant url Routing is used.

Using routing the server responses depend on request url

Ex : For exercise use httpserver folder's routing.js file.

---------------------------------------------------------------------------------------

//HTTP response status

    Informational responses (100–199)
    Successful responses (200–299)
    Redirects (300–399)
    Client errors (400–499)
    Server errors (500–599)

--------------------------------------------------------------------------------------------------------------------

//What is JSON

- JavaScript object notation

- For converting object to json use JSON.stringify 

- For converting json to object use JSON.parse

Ex : See json_api folder

--------------------------------------------------------------------------------------------------------------------

//What is API

- Application programme interface

- Application Programming Interface (API) is used to communicate between apps and to access and fetch the required information.

---------------------------------------------------------------------------------------------------------------------

//Events in Node js

Node.js has a built-in module, called "Events", where you can create-, fire-, and listen for- your own events.

To include the built-in Events module use the require() method. In addition, all event properties and methods are an instance of an EventEmitter object. To be able to access these properties and methods, create an EventEmitter object:

var events = require('events');
var eventEmitter = new events.EventEmitter();

EX : See event folder_name

--------------------------------------------------------------------------------------------------------

//What is Nodes streams 

- Stream are objects that let you read data from a source or write data to a destination in continuous fashion.

- Streaming means list to music or watching video in "real time" , instead of downloading a file to your and watching it later

4types of streams : 
  1. Readable
  2. Writable
  3. Duplex
  4. Transform


EX : for example see stream.js file in stream folder

//Pipe method for using stream functionality

Ex : for example see pipe_method.js file of stream folder

